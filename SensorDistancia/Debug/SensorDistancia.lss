
AVRASM ver. 2.2.8  D:\ProgramasMicro\SensorDistancia\SensorDistancia\main.asm Wed Sep 06 19:22:22 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\ProgramasMicro\SensorDistancia\SensorDistancia\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\ProgramasMicro\SensorDistancia\SensorDistancia\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; SensorDistancia.asm
                                 ;
                                 ; Created: 6/9/2023 19:12:30
                                 ; Author : Sebastian Re
                                 ;
                                 
                                 #include <m328pdef.inc>
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;**** GPIOR0 como regsitros de banderas ****
                                 .equ LASTSTATEBTN = 0	;GPIOR0<0>: ultimo estado pulsador
                                 .equ DATAREADY	  = 1	;GPIOR0<1>: Hay un nuevo comando
                                 .equ CALCULAR	  = 2	;GPIOR0<2>: Calcular distancia
                                 .equ MIDIENDO	  = 3;GPIOR0<3>:  
                                 ;GPIOR0<4>:  
                                 ;GPIOR0<5>:  
                                 .equ ISNEWBTN	  = 6	;GPIOR0<6>: cambio el estado del pulsador
                                 .equ IS10MS	  = 7	;GPIOR0<7>: pasaron 10ms
                                 ;****
                                 
                                 ;****BUTTONS and LEDS****
                                 .equ LEDBUILTIN	  = 5	;PINB (D13)
                                 //.equ LED0		  = 1	;PINB (D9)
                                 .equ ECHO		  = 0   ;PINB (D8)
                                 .equ TRIG		  = 3   ;PINB (D11)
                                 ;***
                                 
                                 ;****RING BUFFER DEFINTIONS****
                                 .equ SIZERXBUF = 64	;Must to be 2^n
                                 .equ SIZETXBUF = 64	;Must to be 2^n
                                 ;****
                                 
                                 .dseg
000100                           counter:	.BYTE	2
000102                           heartbeat:	.BYTE	2
000104                           maskLeds:	.BYTE	2
000106                           time10ms:	.BYTE	1
000107                           time100ms:	.BYTE	1
000108                           dbButton:	.BYTE	1
                                 ;DATA for RING BUFFER
000109                           buffRX:		.BYTE	SIZERXBUF
000149                           indexRXw:	.BYTE	1
00014a                           indexRXr:	.BYTE	1
00014b                           headerRX:	.BYTE	1
00014c                           nBytesRX:	.BYTE	1
00014d                           tmoRX:		.BYTE	1
00014e                           iDataRX:	.BYTE	1
00014f                           cksRX:		.BYTE	1
000150                           buffTX:		.BYTE	SIZETXBUF
000190                           indexTXw:	.BYTE	1
000191                           indexTXr:	.BYTE	1
000192                           nBytesTX:	.BYTE	1
                                 
000193                           COUNTON:	.BYTE	2
000195                           COUNTOFF:	.BYTE	2
                                 
000197                           distanceMs:	.BYTE	2
000199                           distanceM:	.BYTE	1
                                 ;
                                 
                                 .cseg
                                 .org	0x00
000000 940c 022c                 	jmp	start
                                 .org	0x0014
000014 940c 003c                 	jmp ISR_TIMER1_CAPT
                                 .org 0x0016
000016 940c 0067                 	jmp ISR_TIM1_COMPA
                                 .org	0x1C
00001c 940c 007a                 	jmp	ISR_TIMER0_COMPA
                                 .org	0x24	
000024 940c 008b                 	jmp	ISR_USART_RX
                                 .org	0x34
                                 
000034 3032
000035 3332
000036 3830
000037 3432
000038 305f
000039 6231
00003a 3130
00003b 000a                      version:	.db	"20230824_01b01", '\n', 0
                                 
                                 //INTERRUPCIONES
                                 ISR_TIMER1_CAPT:
00003c 9020 003f                 	lds	r2, SREG		;Salvo el registro de estado
00003e 922f                      	push r2
00003f 930f                      	push r16
000040 931f                      	push r17
                                 
000041 9100 0081                 	lds r16, TCCR1B
000043 fd06                      	sbrc r16, ICES1 
000044 c012                      	rjmp ISR_FA  ;entra si es 1
                                 
000045 6400                      	sbr r16, (1<<ICES1)   ;Flanco Ascendente
000046 9300 0081                 	sts TCCR1B, r16
000048 9100 006f                 	lds r16, TIMSK1
00004a 7d0f                      	cbr r16, (1<<ICIE1)
00004b 9300 006f                 	sts TIMSK1, r16
                                 
00004d 9100 0086                 	lds r16, ICR1L
00004f 9110 0087                 	lds r17, ICR1H
000051 9310 0196                 	sts COUNTOFF+1, r17
000053 9300 0195                 	sts COUNTOFF, r16
                                 	
                                 
000055 9af2                      	sbi GPIOR0, CALCULAR
000056 c00b                      	rjmp outISR
                                 
                                 ISR_FA:
000057 7b0f                      	cbr r16, (1<<ICES1)   ;Flanco Descendente
000058 9300 0081                 	sts TCCR1B, r16
00005a 9100 0086                 	lds r16, ICR1L
00005c 9110 0087                 	lds r17, ICR1H
00005e 9300 0193                 	sts COUNTON, r16
000060 9310 0194                 	sts COUNTON+1, r17
                                 
                                 outISR: 
000062 911f                      	pop r17
000063 910f                      	pop r16
000064 902f                      	pop r2
000065 be2f                      	out SREG,r2
000066 9518                      	reti
                                 
                                 ISR_TIM1_COMPA: 
000067 930f                      	push r16
                                 	//ldi r16, PORTB
000068 982b                      	cbi PORTB, TRIG ;Trigger Low
000069 9100 0016                 	lds r16, TIFR1
00006b 9300 0016                 	sts TIFR1, r16
00006d 9100 0081                 	lds r16, TCCR1B
00006f 6400                      	sbr r16, (1<<ICES1)   ;Flanco Ascendente
000070 9300 0081                 	sts TCCR1B, r16
000072 9100 006f                 	lds r16, TIMSK1
000074 6200                      	sbr r16, (1<<ICIE1)
000075 7f0d                      	cbr r16, (1<<OCIE1A)
000076 9300 006f                 	sts TIMSK1, r16
000078 910f                      	pop r16
                                 
000079 9518                      	reti
                                 
                                 ISR_TIMER0_COMPA:
                                 	;Salvo el registro de estado
00007a 922f                      	push	r2
00007b b62f                      	in	r2, SREG
00007c 930f                      	push	r16
00007d 9100 0106                 	lds	r16, time10ms
00007f 950a                      	dec	r16
000080 9300 0106                 	sts	time10ms, r16
000082 f421                      	brne	outCOMPA
000083 e005                      	ldi	r16, 5
000084 9300 0106                 	sts	time10ms, r16
000086 9af7                      	sbi	GPIOR0, IS10MS
                                 outCOMPA:
000087 910f                      	pop	r16			;vuelvo r16 a su estado antes de antender la interrupcion
000088 be2f                      	out	SREG, r2		;dejo STATUS como antes de la interrupcion
000089 902f                      	pop	r2			
00008a 9518                      	reti
                                 
                                 ISR_USART_RX:
00008b 922f                      	push	r2
00008c b62f                      	in	r2, SREG
00008d 930f                      	push	r16
00008e 931f                      	push	r17
00008f 93af                      	push	r26
000090 93bf                      	push	r27
000091 e0b1                      	ldi	r27, high(buffRX)
000092 e0a9                      	ldi	r26, low(buffRX)
000093 9100 0149                 	lds	r16, indexRXw
000095 2711                      	clr	r17
000096 0fa0                      	add	r26, r16
000097 1fb1                      	adc	r27, r17
000098 9110 00c6                 	lds	r17, UDR0
00009a 931c                      	st	X, r17
00009b 9503                      	inc	r16
00009c 730f                      	andi	r16, SIZERXBUF-1	;avoid buffRX overflow (SIZEBUFRX must to be 2^n)
00009d 9300 0149                 	sts	indexRXw, r16
00009f 91bf                      	pop	r27
0000a0 91af                      	pop	r26
0000a1 911f                      	pop	r17
0000a2 910f                      	pop	r16
0000a3 be2f                      	out	SREG, r2
0000a4 902f                      	pop	r2
0000a5 9518                      	reti
                                 
                                 //FUNCIONES DE INICIALIZACION
                                 ;PB5<5, 1>: OUTPUT PB<0>: INPUT(Pullup)
                                 ;PIN ON CHANGE en PB0
                                 initPorts:
0000a6 e208                      	ldi	r16, (1 << LEDBUILTIN) | (1<<TRIG) ;0b00100010
0000a7 b904                      	out	DDRB, r16
0000a8 b30b                      	in	r16, PCIFR
0000a9 2700                      	eor	r16, r16		;Reset de todas la banderas
0000aa bb0b                      	out	PCIFR, r16
0000ab e001                      	ldi	r16, (1 << PCINT0)
0000ac 9300 006b                 	sts	PCMSK0, r16
0000ae 9100 0068                 	lds	r16, PCICR
0000b0 6001                      	sbr	r16, (1 << PCIE0)
0000b1 9300 0068                 	sts	PCICR, r16
0000b3 9508                      	ret
                                 
                                 ;OCF0A cada 2ms CTC
                                 initTmr0:
0000b4 e002                      	ldi	r16, 0x02
0000b5 bd04                      	out	TCCR0A, r16
0000b6 9aaa                      	sbi	TIFR0, (1 << OCF0A)
0000b7 e70c                      	ldi	r16, 124
0000b8 bd07                      	out	OCR0A, r16
0000b9 e002                      	ldi	r16, (1 << OCIE0A)
0000ba 9300 006e                 	sts	TIMSK0, r16 
0000bc e004                      	ldi	r16, 0b00000100
0000bd bd05                      	out	TCCR0B, r16
0000be 9508                      	ret
                                 
                                 init_timer1:
0000bf e000                      	ldi r16,0x00
0000c0 9300 0080                 	sts TCCR1A,r16
0000c2 9ab2                      	sbi TIFR1, (1 << OCF1A)
0000c3 ec0a                      	ldi r16,0xCA
0000c4 9300 0081                 	sts TCCR1B,r16
                                 /*	ldi r18,high(TOP)
                                 	sts OCR1AH,r18
                                 	ldi r18,low(TOP)
                                 	sts OCR1AL,r18	
                                 	ldi r16, (1 << OCIE1A) //Habilita la interrupcion
                                 	ldi r16,0x22
                                 	sts TIMSK1,r16*/
0000c6 9508                      	ret
                                 
                                 
                                 initUsart0: ; 115200, 8,N,1
0000c7 ef0e                      	ldi	r16,0xfe
0000c8 9300 00c0                 	sts	UCSR0A,r16
0000ca e100                      	ldi	r16,16
0000cb 9300 00c4                 	sts	UBRR0L,r16
0000cd e000                      	ldi	r16,0
0000ce 9300 00c5                 	sts	UBRR0H,r16
0000d0 e006                      	ldi	r16,0x06
0000d1 9300 00c2                 	sts	UCSR0C,r16
0000d3 e908                      	ldi	r16,0x98
0000d4 9300 00c1                 	sts	UCSR0B,r16
0000d6 9508                      	ret
                                 
                                 doLeds:
0000d7 9100 0104                 	lds	r16, maskLeds
0000d9 9110 0105                 	lds	r17, maskLeds+1
0000db 9120 0102                 	lds	r18, heartbeat
0000dd 9130 0103                 	lds	r19, heartbeat+1
0000df 2320                      	and	r18, r16
0000e0 f421                      	brne	onHeartbeat
0000e1 2331                      	and	r19, r17
0000e2 f411                      	brne	onHeartbeat
0000e3 982d                      	cbi	PORTB, LEDBUILTIN
0000e4 9508                      	ret
                                 
                                 onHeartbeat:
0000e5 9a2d                      	sbi	PORTB, LEDBUILTIN
                                 
                                 rorMaskHeartbeat:
0000e6 9488                      	clc
0000e7 9507                      	ror	r16
0000e8 9517                      	ror	r17
0000e9 ff15                      	sbrs	r17, 5
0000ea c002                      	rjmp	outHeartbeat
0000eb 2711                      	clr	r17
0000ec e800                      	ldi	r16, 0x80
                                 
                                 outHeartbeat:		
0000ed 9300 0104                 	sts	maskLeds, r16
0000ef 9310 0105                 	sts	maskLeds+1, r17
0000f1 9508                      	ret
                                 
                                 do100ms:
0000f2 9100 0107                 	lds	r16, time100ms
0000f4 950a                      	dec	r16
0000f5 9300 0107                 	sts	time100ms, r16
0000f7 f009                      	breq	PC+2
0000f8 e00a                      	ldi	r16, 10
0000f9 9300 0107                 	sts	time100ms, r16
                                 
0000fb e106                      	ldi r16, TIFR1
0000fc 7f0d                      	cbr r16 , (1<<OCF1A)
0000fd 9300 0016                 	sts TIFR1,r16
0000ff 9100 0084                 	lds r16,TCNT1L
000101 9110 0085                 	lds r17,TCNT1H
000103 e124                      	ldi r18,20
000104 0f02                      	add r16,r18
000105 f408                      	brcc PC+2
000106 9513                      	inc r17
000107 9300 0089                 	sts OCR1AH,r16
000109 9310 0088                 	sts OCR1AL,r17
00010b e002                      	ldi r16, (1 << OCIE1A)
00010c 9300 006f                 	sts TIMSK1,r16
00010e 9a2b                      	sbi PORTB, TRIG ;Trigger High
00010f 940e 00d7                 	call	doLeds
                                 
                                 testTmoRX:
000111 9100 014b                 	lds	r16, headerRX
000113 2300                      	tst	r16
000114 f409                      	brne	PC+2
000115 9508                      	ret
000116 9100 014d                 	lds	r16, tmoRX
000118 950a                      	dec	r16
000119 9300 014d                 	sts	tmoRX, r16
00011b f009                      	breq	PC+2
00011c 9508                      	ret
00011d 2700                      	clr	r16
00011e 9300 014b                 	sts	headerRX, r16
000120 9508                      	ret
                                 
                                 DecodeHeader:
000121 9110 0149                 	lds	r17, indexRXw
000123 9100 014a                 	lds	r16, indexRXr
                                 readByteRX:
000125 e0b1                      	ldi	r27, high(buffRX)
000126 e0a9                      	ldi	r26, low(buffRX)
000127 0fa0                      	add	r26, r16
000128 f408                      	brcc	PC+2
000129 5fbf                      	subi	r27, -1
00012a 1301                      	cpse	r16, r17
00012b c002                      	rjmp	nextByteHeader
00012c 0000                      	nop
00012d 9508                      	ret
                                 nextByteHeader:
00012e 913c                      	ld	r19, X
00012f 9120 014b                 	lds	r18, headerRX
000131 3026                      	cpi	r18, 6		;STATE waiting n bytes of data
000132 f1f1                      	breq	waitingData
000133 3025                      	cpi	r18, 5		;STATE token ':'
000134 f161                      	breq	waitToken
000135 3024                      	cpi	r18, 4		;STATE nBytes
000136 f129                      	breq	waitNBytes
000137 3023                      	cpi	r18, 3		;STATE 'R'
000138 f0f9                      	breq	waitR
000139 3022                      	cpi	r18, 2		;STATE 'E'
00013a f0c9                      	breq	waitE
00013b 3021                      	cpi	r18, 1		;STATE 'N'
00013c f099                      	breq	waitN
00013d 3020                      	cpi	r18, 0		;STATE 'U'
00013e f051                      	breq	waitU
                                 resetHeader:
00013f ef2f                      	ldi	r18, 255
                                 nextHeader:
000140 9523                      	inc	r18
000141 9320 014b                 	sts	headerRX, r18
                                 nextByteRX:
000143 730f                      	andi	r16, SIZERXBUF-1
000144 5f0f                      	subi	r16, -1
000145 730f                      	andi	r16, SIZERXBUF-1
000146 9300 014a                 	sts	indexRXr, r16
000148 cfdc                      	rjmp	readByteRX
                                 waitU:
000149 3535                      	cpi	r19, 'U'
00014a f009                      	breq	PC+2
00014b cff7                      	rjmp	nextByteRX
00014c e033                      	ldi	r19, 3
00014d 9330 014d                 	sts	tmoRX, r19
00014f cff0                      	rjmp	nextHeader
                                 waitN:	
000150 343e                      	cpi	r19, 'N'
000151 f371                      	breq	nextHeader
000152 5001                      	subi	r16, 1
000153 cfeb                      	rjmp	resetHeader
                                 waitE:	
000154 3435                      	cpi	r19, 'E'
000155 f351                      	breq	nextHeader
000156 5001                      	subi	r16, 1
000157 cfe7                      	rjmp	resetHeader
                                 waitR:	
000158 3532                      	cpi	r19, 'R'
000159 f331                      	breq	nextHeader
00015a 5001                      	subi	r16, 1
00015b cfe3                      	rjmp	resetHeader
                                 waitNBytes:
00015c 9330 014c                 	sts	nBytesRx, r19
00015e 9330 014f                 	sts	cksRX, r19
000160 cfdf                      	rjmp	nextHeader
                                 waitToken:	
000161 333a                      	cpi	r19, ':'
000162 f011                      	breq	cksRXInit
000163 5001                      	subi	r16, 1
000164 cfda                      	rjmp	resetHeader
                                 cksRXInit:
000165 e336                      	ldi	r19, 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':'
000166 9020 014f                 	lds	r2, cksRX
000168 2623                      	eor	r2, r19
000169 9220 014f                 	sts	cksRX, r2
00016b 9503                      	inc	r16
00016c 730f                      	andi	r16, SIZERXBUF-1
00016d 9300 014e                 	sts	iDataRX, r16
00016f 950a                      	dec	r16
000170 cfcf                      	rjmp	nextHeader
                                 waitingData:
000171 9140 014c                 	lds	r20, nBytesRX
000173 954a                      	dec	r20
000174 9340 014c                 	sts	nBytesRX, r20
000176 3040                      	cpi	r20, 0
000177 f031                      	breq	checkCksRX
000178 9020 014f                 	lds	r2, cksRX
00017a 2623                      	eor	r2, r19
00017b 9220 014f                 	sts	cksRX, r2
00017d cfc5                      	rjmp	nextByteRX
                                 checkCksRX:
00017e 9020 014f                 	lds	r2, cksRX
000180 98f1                      	cbi	GPIOR0, DATAREADY
000181 1532                      	cp	r19, r2
000182 f409                      	brne	PC+2
000183 9af1                      	sbi	GPIOR0, DATAREADY
000184 cfba                      	rjmp	resetHeader
                                 			
                                 		
                                 ;r2 cksTX
                                 ;r16 iDataRX
                                 ;r17 indexTXw
                                 DecodeCMD:
000185 e306                      	ldi	r16, 'U' ^ 'N' ^ 'E' ^ 'R' ^ ':'
000186 2e20                      	mov	r2, r16
000187 9110 0190                 	lds	r17, indexTXw
000189 5f1a                      	subi	r17, -6			
00018a 731f                      	andi	r17, SIZETXBUF-1
00018b 9100 014e                 	lds	r16, iDataRX
00018d 940e 01ed                 	call	GetByteFromRx
00018f 3f30                      	cpi	r19, 0xF0	;0xF0	ALIVE
000190 f409                      	brne	PC+2
000191 c025                      	rjmp	doALIVE
000192 3f31                      	cpi	r19, 0xF1	;0xF1	FIRMWARE
000193 f409                      	brne	PC+2
000194 c02c                      	rjmp	doFIRMWARE
000195 3d30                      	cpi	r19, 0xD0	;0xD0	ORDENA MEDIR
000196 f409                      	brne	PC+2
000197 c004                      	rjmp	doMEDIR
000198 3d31                      	cpi	r19, 0xD1	;0xD1	PIDE MEDIDA
000199 f409                      	brne	PC+2
00019a c00f                      	rjmp	doMANDAR
00019b 9508                      	ret
                                 doMEDIR:
00019c 940e 01f6                 	call	PutByteOnTx
00019e 940e 01ed                 	call	GetByteFromRx
0001a0 3031                      	cpi	r19, 0x01
0001a1 f411                      	brne medirOFF
0001a2 9af3                      	sbi GPIOR0, MIDIENDO
0001a3 c001                      	rjmp medirOUT
                                 medirOFF:
0001a4 98f3                      	cbi GPIOR0, MIDIENDO
                                 medirOUT:
0001a5 e033                      	ldi	r19, 3		;3 bytes of data 
0001a6 2623                      	eor	r2, r19
0001a7 9330 0192                 	sts	nBytesTX, r19
0001a9 c025                      	rjmp	putHeader
                                 doMANDAR:
0001aa 940e 01f6                 	call	PutByteOnTx
0001ac 9130 0199                 	lds r19, distanceM
                                 	//lds r19, distanceMs+1
0001ae 940e 01f6                 	call	PutByteOnTx
                                 	//lds r19, distanceMs
0001b0 940e 01f6                 	call	PutByteOnTx
0001b2 e034                      	ldi	r19, 4		;3 bytes of data 
0001b3 2623                      	eor	r2, r19
0001b4 9330 0192                 	sts	nBytesTX, r19
0001b6 c018                      	rjmp	putHeader
                                 doALIVE:
0001b7 940e 01f6                 	call	PutByteOnTx
0001b9 e03d                      	ldi	r19, 0x0D
0001ba 940e 01f6                 	call	PutByteOnTx
0001bc e033                      	ldi	r19, 3		;3 bytes of data 
0001bd 2623                      	eor	r2, r19
0001be 9330 0192                 	sts	nBytesTX, r19
0001c0 c00e                      	rjmp	putHeader
                                 doFIRMWARE:
0001c1 940e 01f6                 	call	PutByteOnTx
0001c3 e6e8                      	ldi	r30, low(version << 1)
0001c4 e0f0                      	ldi	r31, high(version << 1)
0001c5 e00e                      	ldi	r16, 14		;sizeof(version)
                                 nextVersionChar:	
0001c6 9135                      	lpm	r19, Z+
0001c7 940e 01f6                 	call	PutByteOnTx
0001c9 950a                      	dec	r16
0001ca f7d9                      	brne	nextVersionChar
0001cb e03f                      	ldi	r19, 14 + 1	;15 bytes of data
0001cc 2623                      	eor	r2, r19
0001cd 9330 0192                 	sts	nBytesTX, r19
                                 putHeader:
0001cf 2d32                      	mov	r19, r2
0001d0 940e 01f6                 	call	PutByteOntx		;Add checksum to buffTX
0001d2 9310 0190                 	sts	indexTXw, r17
0001d4 9100 0192                 	lds	r16, nBytesTx
0001d6 5f0a                      	subi	r16, -6
0001d7 1b10                      	sub	r17, r16
0001d8 731f                      	andi	r17, SIZETXBUF-1
0001d9 e535                      	ldi	r19, 'U'
0001da 940e 01f6                 	call	PutByteOnTx
0001dc e43e                      	ldi	r19, 'N'
0001dd 940e 01f6                 	call	PutByteOnTx
0001df e435                      	ldi	r19, 'E'
0001e0 940e 01f6                 	call	PutByteOnTx
0001e2 e532                      	ldi	r19, 'R'
0001e3 940e 01f6                 	call	PutByteOnTx
0001e5 9130 0192                 	lds	r19, nBytesTX
0001e7 940e 01f6                 	call	PutByteOnTx
0001e9 e33a                      	ldi	r19, ':'
0001ea 940e 01f6                 	call	PutByteOnTx
0001ec 9508                      	ret
                                 
                                 
                                 
                                 ;USE	R27:R26 buffRX
                                 ;INPUT	R16 iDataRX
                                 ;OUTPUT	R19 data byte
                                 ;Read a byte from a buffRX, increment iDataRX 
                                 GetByteFromRx:
0001ed e0b1                      	ldi	r27, high(buffRX)
0001ee e0a9                      	ldi	r26, low(buffRX)
0001ef 0fa0                      	add	r26, r16
0001f0 f408                      	brcc	PC+2
0001f1 5fbf                      	subi	r27, -1
0001f2 913c                      	ld		r19, X
0001f3 9503                      	inc	r16
0001f4 730f                      	andi	r16, SIZERXBUF-1
0001f5 9508                      	ret
                                 
                                 ;USE	R29:R28 buffTX
                                 ;INPUT	R17 indexTXw
                                 ;INPUT	R2 cksTX
                                 ;INPUT	R19 data byte
                                 ;Add a byte in a buffTX, increment indexTXw, and add checksum 
                                 PutByteOnTx:
0001f6 2623                      	eor	r2, r19
0001f7 e0d1                      	ldi	r29, high(buffTX)
0001f8 e5c0                      	ldi	r28, low(buffTX) 
0001f9 0fc1                      	add	r28, r17
0001fa f408                      	brcc	PC+2
0001fb 5fdf                      	subi	r29, -1
0001fc 8338                      	st	Y, r19
0001fd 9513                      	inc	r17
0001fe 731f                      	andi	r17, SIZETXBUF-1
0001ff 9508                      	ret
                                 
                                 ;INPUT R30, R31 the address of Constant text in flash
                                 ;The string must terminate with a null character
                                 ;The null character is also sent
                                 PutConstTextOnTx:
000200 930f                      	push	r16
000201 931f                      	push	r17
000202 93af                      	push	r26
000203 93bf                      	push	r27
000204 9100 0190                 	lds	r16, indexTXw
                                 nextByteText:
000206 e0b1                      	ldi	r27, high(buffTX)
000207 e5a0                      	ldi	r26, low(buffTX)
000208 0fa0                      	add	r26, r16
000209 f408                      	brcc	PC+2
00020a 5fbf                      	subi	r27, -1
00020b 9503                      	inc	r16
00020c 730f                      	andi	r16, SIZETXBUF-1
00020d 9115                      	lpm	r17, Z+
00020e 3010                      	cpi	r17, '\0'
00020f 931c                      	st	X, r17
000210 f7a9                      	brne	nextByteText
000211 9300 0190                 	sts	indexTXw, r16
000213 91bf                      	pop	r27
000214 91af                      	pop	r26
000215 911f                      	pop	r17
000216 910f                      	pop	r16
000217 9508                      	ret
                                 
                                 TxData:
000218 9100 00c0                 	lds	r16, UCSR0A
00021a ff05                      	sbrs	r16, UDRE0
00021b 9508                      	ret
00021c 7b0f                      	cbr	r16, (1 << TXC0)
00021d e0b1                      	ldi	r27, high(buffTX)
00021e e5a0                      	ldi	r26, low(buffTX)
00021f 9100 0191                 	lds	r16, indexTXr
000221 0fa0                      	add	r26, r16
000222 f408                      	brcc	PC+2
000223 5fbf                      	subi	r27, -1
000224 9503                      	inc	r16
000225 730f                      	andi	r16, SIZETXBUF-1
000226 9300 0191                 	sts	indexTXr, r16
000228 910c                      	ld	r16, X
000229 9300 00c6                 	sts	UDR0, r16
00022b 9508                      	ret
                                 
                                 
                                 
                                 ; Replace with your application code
                                 start:
00022c ef0f                          ldi	r16, low(RAMEND)
00022d bf0d                      	out	SPL, r16
00022e e008                      	ldi	r16, high(RAMEND)
00022f bf0e                      	out	SPH, r16
000230 94f8                      	cli
000231 940e 00a6                 	call	initPorts
000233 940e 00b4                 	call	initTmr0
000235 940e 00bf                 	call	init_timer1
000237 940e 00c7                 	call	initUsart0
                                 	;inicializo variables
000239 e800                      	ldi	r16, 0x80
00023a 9300 0104                 	sts	maskLeds, r16
00023c 9300 0102                 	sts	heartbeat, r16
00023e e000                      	ldi	r16, 0x00
00023f 9300 0198                 	sts distanceMs+1, r16
000241 9300 0197                 	sts distanceMs, r16
000243 9300 0105                 	sts	maskLeds+1, r16
000245 9300 0103                 	sts	heartbeat+1, r16
000247 9300 0100                 	sts	counter, r16
000249 9300 0101                 	sts	counter+1, r16
00024b 9300 014b                 	sts	headerRX, r16
00024d 9300 014a                 	sts	indexRXr, r16
00024f 9300 0149                 	sts	indexRXw, r16
000251 9300 0191                 	sts	indexTXr, r16
000253 9300 0190                 	sts	indexTXw, r16
000255 e005                      	ldi	r16, 5
000256 9300 0106                 	sts	time10ms, r16
000258 e00a                      	ldi	r16, 10
000259 9300 0107                 	sts	time100ms, r16
00025b b103                      	in	r16, PINB
                                 	//sbi	GPIOR0, LASTSTATEBTN
00025c 98f3                      	cbi GPIOR0, MIDIENDO
                                 	;fin inicializacion
00025d 9478                      	sei
                                 loop:
00025e 9bf7                      	sbis	GPIOR0, IS10MS	
00025f c007                      	rjmp	testIfKey
000260 98f7                      	cbi		GPIOR0, IS10MS
000261 99f3                      	sbic	GPIOR0, MIDIENDO
000262 940e 00f2                 	call	do100ms
000264 99f2                      	sbic	GPIOR0, CALCULAR
000265 940e 027f                 	call	calculo
                                 testIfKey:
000267 9bf6                      	sbis	GPIOR0, ISNEWBTN
000268 c000                      	rjmp	testNewCMD
                                 testNewCMD:
000269 9bf1                      	sbis	GPIOR0, DATAREADY
00026a c003                      	rjmp	testRXData
00026b 98f1                      	cbi		GPIOR0, DATAREADY
00026c 940e 0185                 	call	DecodeCMD
                                 testRXData:
00026e 9100 0149                 	lds	r16, indexRXw
000270 9110 014a                 	lds	r17, indexRXr
000272 1301                      	cpse	r16, r17
000273 940e 0121                 	call	DecodeHeader
000275 0000                      	nop
                                 testTXData:
000276 9100 0190                 	lds	r16, indexTXw
000278 9110 0191                 	lds	r17, indexTXr
00027a 1301                      	cpse	r16, r17
00027b 940e 0218                 	call	txData
00027d 0000                      	nop
00027e cfdf                      	rjmp	loop
                                 
                                 calculo:
00027f 98f2                      	cbi GPIOR0, CALCULAR
                                 
000280 9140 0193                 	lds r20, COUNTON
000282 9150 0195                 	lds r21, COUNTOFF
000284 9160 0194                 	lds r22, COUNTON+1
000286 9170 0196                 	lds r23, COUNTOFF+1
                                 
000288 1b54                      	sub r21,r20
000289 0b76                      	sbc r23, r22
                                 
00028a 9370 0198                 	sts distanceMs+1, r23
00028c 9350 0197                 	sts distanceMs, r21


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   5 y  :   1 z  :   2 r0 :   0 r1 :   0 r2 :  27 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 169 r17:  41 r18:  15 r19:  46 r20:   6 
r21:   3 r22:   2 r23:   3 r24:   0 r25:   0 r26:  14 r27:  14 r28:   2 
r29:   2 r30:   1 r31:   1 
Registers used: 18 out of 35 (51.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   7 adiw  :   0 and   :   2 
andi  :  10 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   6 brcs  :   0 break :   0 breq  :  15 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  27 cbi   :   8 cbr   :   5 
clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  19 cpse  :   3 dec   :   6 eor   :   8 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :   8 jmp   :   5 
ld    :   3 ldd   :   0 ldi   :  54 lds   :  46 lpm   :   2 lsl   :   0 
lsr   :   0 mov   :   2 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   0 ori   :   0 out   :  10 pop   :  15 
push  :  15 rcall :   0 ret   :  17 reti  :   4 rjmp  :  28 rol   :   0 
ror   :   2 sbc   :   1 sbci  :   0 sbi   :   8 sbic  :   2 sbis  :   3 
sbiw  :   0 sbr   :   4 sbrc  :   1 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 sts   :  67 
sub   :   2 subi  :  12 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 47 out of 113 (41.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00051e   1210     16   1226   32768   3.7%
[.dseg] 0x000100 0x00019a      0    154    154    2048   7.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
